{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1920,"height":1095,"maximized":true},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/howardchen/backstory.me"],"buffers":[{"text":"# == Schema Information\n#\n# Table name: groups\n#\n#  created_at :datetime\n#  handle     :string\n#  id         :integer          not null, primary key\n#  name       :string\n#  updated_at :datetime\n#\n\nclass Group < ActiveRecord::Base\n  ##################################################\n  #\n  # Relationships\n  #\n  ##################################################\n  has_one :profile, as: :profilable, dependent: :destroy\n\n  has_many :group_memberships\n  has_many :users, through: :group_memberships\n\n  ##################################################\n  #\n  # Validations\n  #\n  ##################################################\n  validate :handle_uniqueness\n  validates :handle, format: { with: /\\A[\\w]+\\z/ , message: \"only allows letters, numbers, and underscores\"}, uniqueness: { case_sensitive: false }, presence: true\n\n  def handle_uniqueness\n    if self.handle_changed? && Profile.handle_exists?(self.handle)\n      errors.add(:handle, \"has already been taken.\")\n    end\n  end\n\n  ##################################################\n  #\n  # Callbacks\n  #\n  ##################################################\n  after_save :update_profile\n  after_create :create_and_register_profile\n\n  ##################################################\n  #\n  # Properties & Methods\n  #\n  ##################################################\n\n  ##################################################\n  # Creation\n  ##################################################\n  def create_for_user(user)\n    self.save && add_user(user)\n  end\n\n  def add_user(user)\n    self.group_memberships.where(group: self, user: user).first_or_create\n  end\n\n  private\n\n  def create_and_register_profile\n    group_profile = create_profile\n    group_profile.register\n  end\n\n  def update_profile\n    profile.save\n  end\n\nend\n","markers":{"markers":{"1":{"id":1,"range":[[43,0],[43,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":3394,"goalBufferRange":null,"autoscroll":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[41,0],[42,0]],"newRange":[[41,0],[41,0]],"oldText":"  before_validation :lower_handle\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[41,0],[42,0]],"newRange":[[41,0],[41,0]],"oldText":"\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[44,0],[48,0]],"newRange":[[44,0],[44,0]],"oldText":"  def lower_handle\n    self.handle = self.handle.downcase\n  end\n\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/howardchen/backstory.me/api/backstory/app/models/group.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"21afc8884caab0e9d261ea7cdc9f9a6ed4f87418","deserializer":"TextBuffer"},{"text":"# == Schema Information\n#\n# Table name: users\n#\n#  authentication_token   :string\n#  created_at             :datetime\n#  current_sign_in_at     :datetime\n#  current_sign_in_ip     :string\n#  email                  :string           default(\"\"), not null\n#  encrypted_password     :string           default(\"\"), not null\n#  first_name             :string\n#  handle                 :string\n#  id                     :integer          not null, primary key\n#  last_name              :string\n#  last_sign_in_at        :datetime\n#  last_sign_in_ip        :string\n#  primary_email_id       :integer\n#  remember_created_at    :datetime\n#  reset_password_sent_at :datetime\n#  reset_password_token   :string\n#  role                   :integer          default(\"0\"), not null\n#  sign_in_count          :integer          default(\"0\"), not null\n#  updated_at             :datetime\n#\n# Indexes\n#\n#  index_users_on_email                 (email) UNIQUE\n#  index_users_on_reset_password_token  (reset_password_token) UNIQUE\n#\n\nclass User < ActiveRecord::Base\n  ##################################################\n  #\n  # Relationships\n  #\n  ##################################################\n\n  ##################################################\n  # Emails\n  ##################################################\n  belongs_to :primary_email, class_name: :Email\n  has_many :emails, dependent: :destroy\n\n  ##################################################\n  # Profiles\n  ##################################################\n  has_one :profile, as: :profilable, dependent: :destroy\n\n  ##################################################\n  # Group Memberships\n  ##################################################\n  has_many :group_memberships\n\n  ##################################################\n  # Groups\n  ##################################################\n  has_many :groups, through: :group_memberships\n\n  ##################################################\n  # Page Views\n  ##################################################\n  has_many :page_views\n  has_many :post_page_views,\n    -> { where(viewable_type: \"Post\").where.not(viewable_id: nil) },\n    class_name: :PageView\n\n  ##################################################\n  # Posts\n  ##################################################\n  def read_posts\n    post_ids = post_page_views.pluck(:viewable_id)\n    Post.where(id: post_ids)\n  end\n\n  def recent_read_posts\n    post_ids = post_page_views.most_recent.pluck(:viewable_id)\n    Post.where(id: post_ids)\n  end\n\n  ##################################################\n  # Notifications\n  ##################################################\n  has_many :notifications\n\n  ##################################################\n  #\n  # Validations\n  #\n  ##################################################\n  validates :password, confirmation: true\n  validates :password_confirmation, presence: true, on: :create\n  validates :handle, format: { with: /\\A[\\w]+\\z/ , message: \"only allows letters, numbers, and underscores\"}, uniqueness: { case_sensitive: false }, presence: true\n  validate :handle_uniqueness\n\n  def handle_uniqueness\n    if self.handle_changed? && Profile.handle_exists?(self.handle)\n      errors.add(:handle, \"has already been taken.\")\n    end\n  end\n\n  ##################################################\n  #\n  # Callbacks\n  #\n  ##################################################\n  before_save :update_email\n\n  after_create :create_and_register_profile\n\n  after_create :create_primary_email\n  after_save :update_profile\n\n  ##################################################\n  # Emails\n  ##################################################\n  after_create :send_sign_up_confirmation_email\n\n  ##################################################\n  #\n  # Extra Macros\n  #\n  ##################################################\n  devise :database_authenticatable, :registerable,\n         :recoverable, :rememberable, :trackable, :validatable\n\n  ##################################################\n  #\n  # Properties & Methods\n  #\n  ##################################################\n  enum role: [ :regular, :admin ]\n\n  def name\n    \"#{first_name} #{last_name}\"\n  end\n\n  ##################################################\n  # Search\n  ##################################################\n  include PgSearch\n  pg_search_scope :search,\n                  against: [[:first_name, \"A\"], [:last_name, \"A\"], [:handle, \"A\"]],\n                  using: { tsearch: { prefix: true, normalization: 2 } }\n\n  ##################################################\n  # Emails\n  ##################################################\n  def add_email(email_address)\n    Email.create(\n      user: self,\n      email: email_address,\n    )\n  end\n\n  def remove_email(email)\n    email.destroy\n  end\n\n  def set_primary_email(email)\n    self.primary_email = email\n    self.save\n  end\n\n  ##################################################\n  # Token Authentication\n  ##################################################\n  def ensure_authentication_token\n    if authentication_token.blank?\n      self.authentication_token = generate_authentication_token\n      self.save\n    end\n  end\n\n  def generate_authentication_token\n    # TODO(mark): Make this general (this is repeated in ghost users).\n    loop do\n      token = Devise.friendly_token\n      break token unless self.class.unscoped.where(authentication_token: token).first\n    end\n  end\n\n  private\n\n  def create_primary_email\n    #\n    # The Email model has it's own validations for unique emails\n    # which will be cascaded to the user model if they fail.\n    #\n    self.set_primary_email(add_email(self.email))\n  end\n\n  def update_email\n    self.email = self.primary_email.try(:email) || self.email\n  end\n\n  def create_and_register_profile\n    user_profile = create_profile\n    user_profile.register\n  end\n\n  def update_profile\n    profile.save\n  end\n\n  def send_sign_up_confirmation_email\n    SignUpConfirmationMailer.create(self).deliver\n  end\n\nend\n","markers":{"markers":{"1":{"id":1,"range":[[11,33],[11,33]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":3422,"goalBufferRange":null,"autoscroll":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[105,0],[107,0]],"newRange":[[105,0],[105,0]],"oldText":"  before_validation :lower_handle\n\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[112,0],[116,0]],"newRange":[[112,0],[112,0]],"oldText":"  def lower_handle\n    self.handle = self.handle.downcase\n  end\n\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/howardchen/backstory.me/api/backstory/app/models/user.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"a92b7c70828e33d9bd76b80409f764ae2344f955","deserializer":"TextBuffer"},{"text":"# enhanced-resolve\r\n\r\nOffers a async require.resolve function. It's highly configurable.\r\n\r\n[documentation](https://github.com/webpack/docs/wiki)\r\n\r\n\r\n## Features\r\n\r\n* plugin system\r\n* provide a custom filesystem\r\n* sync and async node.js filesystems included\r\n\r\n\r\n## Tests\r\n\r\n``` javascript\r\nnpm test\r\n```\r\n\r\n[![Build Status](https://secure.travis-ci.org/webpack/enhanced-resolve.png?branch=master)](http://travis-ci.org/webpack/enhanced-resolve)\r\n\r\n\r\n## License\r\n\r\nCopyright (c) 2012-2013 Tobias Koppers\r\n\r\nMIT (http://www.opensource.org/licenses/mit-license.php)","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":3426,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/howardchen/backstory.me/web/node_modules/webpack-dev-server/node_modules/webpack-dev-middleware/node_modules/enhanced-resolve/README.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"828ed4d91af10054715a9ea04de3a801a6eae924","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3387,"items":[{"id":3394,"softTabs":true,"displayBuffer":{"id":3395,"softWrapped":false,"editorWidthInChars":null,"scrollTop":489,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/howardchen/backstory.me/api/backstory/app/models/group.rb","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":3422,"softTabs":true,"displayBuffer":{"id":3423,"softWrapped":false,"editorWidthInChars":null,"scrollTop":632,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/howardchen/backstory.me/api/backstory/app/models/user.rb","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":3426,"softTabs":true,"displayBuffer":{"id":3427,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/howardchen/backstory.me/web/node_modules/webpack-dev-server/node_modules/webpack-dev-middleware/node_modules/enhanced-resolve/README.md","invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/howardchen/backstory.me/web/node_modules/webpack-dev-server/node_modules/webpack-dev-middleware/node_modules/enhanced-resolve/README.md","focused":true,"deserializer":"Pane"},"activePaneId":3387,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-ruby-on-rails","language-ruby","language-gfm","language-javascript","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false,"wholeWord":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false},"findHistory":["GroupMembershipActionCreators","handle","update_com","update_from","conso","Todo","GroupsForCurrentuser","Profile","willReceive","GroupCard","GroupMembership","GroupMembershipCards","console","consol","groups","profile_handle","profile_han","handle","prece","pre","pres","handle","group_mem","lower","lower_handle"],"replaceHistory":["FollowershipsForProfileCollection","FollowershipsForProfile","SearchProfile","TopicsSearch","ProfilesSearch","PostsSearch","ProfileSearch","PostsSearch","GroupsPage","Profile","GroupProfiles","GroupProfilesFor","GroupsForCurrentUser","{@props.group.getProfile()}","GroupCard","Group","GroupManagePage","UsersForUser","Group","GroupMembership","GroupMembershipsForGroup"],"pathsHistory":["FollowershipsForProfileCollection","FollowershipsForProfile","SearchProfile","TopicsSearch","ProfilesSearch","PostsSearch","ProfileSearch","PostsSearch","GroupsPage","Profile","GroupProfiles","GroupProfilesFor","GroupsForCurrentUser","{@props.group.getProfile()}","GroupCard","Group","GroupManagePage","UsersForUser","Group","GroupMembership","GroupMembershipsForGroup"]},"fuzzy-finder":{"/Users/howardchen/backstory.me/api/backstory/app/models/group.rb":1424904780501,"/Users/howardchen/backstory.me/api/backstory/app/models/user.rb":1424904780863,"/Users/howardchen/backstory.me/web/node_modules/webpack-dev-server/node_modules/webpack-dev-middleware/node_modules/enhanced-resolve/README.md":1424904781264},"keybinding-resolver":{},"metrics":{"sessionLength":74983036},"tree-view":{"directoryExpansionStates":[{}],"selectedPath":"/Users/howardchen/backstory.me/web","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":266}}}